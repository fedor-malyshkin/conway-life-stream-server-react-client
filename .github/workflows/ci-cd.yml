name: ci-cd

on:
  push:

jobs:
  build-test:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: set-up-jdk
        uses: actions/setup-java@v1
        with:
          java-version: '15' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - name: cache-local-repository
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: grant-execute-permission-for-gradlew
        run: chmod +x gradlew
      - name: build-with-gradle
        run: ./gradlew build
      - name: upload-build-dir
        uses: actions/upload-artifact@v2
        with:
          name: build-dir
          path: |
            build/libs
            docker/
          retention-days: 7
      - name: run-tests
        run: ./gradlew test
      - name: upload-test-results-dir
        uses: actions/upload-artifact@v2
        with:
          name: test-results-dir
          path: build/test-results/
          retention-days: 7
  publish-test-results:
    runs-on: ubuntu-18.04
    needs: build-test
    steps:
      - name: download-test-results
        uses: actions/download-artifact@v4.1.7
        with:
          name: test-results-dir
          path: build/test-results/  # keep the same structure everywhere
      - name: publish-test-results
        uses: EnricoMi/publish-unit-test-result-action@v1.6
        if: always() # guarantees that this action always runs, even if earlier steps (e.g., the unit test step) in your workflow fail.
        with:
          report_individual_runs: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: build/test-results/**/*.xml
  deploy:
    runs-on: ubuntu-18.04
    needs: build-test
    steps:
      - name: download-build-results
        uses: actions/download-artifact@v4.1.7
        with:
          name: build-dir
      - name: login-to-docker-hub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: set-up-docker-buildx
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/setup-buildx-action@v1
      - name: get-short-sha # https://github.community/t/substring-function/18401
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          id=$(echo ${{github.sha}} | cut -b-7)
          echo "::set-output name=sha::sha-$id"
        id: get-short-sha-id
      - name: build-and-push-docker-image
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v2
        with:
          push: true
          file: docker/Dockerfile
          context: build/libs
          tags: |
            ghcr.io/fedor-malyshkin/conway-life-stream-reactor-client:latest
            ghcr.io/fedor-malyshkin/conway-life-stream-reactor-client:${{steps.get-short-sha-id.outputs.sha}}
      - name: set-k8s-context
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: rollup-update-k8s
        if: ${{ github.ref == 'refs/heads/main' }}
        run: kubectl set image deployment/stream-reactor-client-deployment conway-life-stream-reactor-client=ghcr.io/fedor-malyshkin/conway-life-stream-reactor-client:${{steps.get-short-sha-id.outputs.sha}}
